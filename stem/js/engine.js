// Generated by CoffeeScript 2.5.0
var Client, Engine;

Client = class Client {
  static constructor() {
    return this.url = "https://api.github.com/repos/droub/keybox/contents/data%2fdb%2ejson";
  }

  static getData(callback) {
    return fetch(this.url, {
      method: "GET",
      headers: {
        "Accept": "application/vnd.github.v3.raw+json"
      }
    }).then(response(() => {
      return response.json();
    })).then(json(() => {
      return callback(json);
    })).catch(err(() => {
      return alert(err);
    }));
  }

  static getMeta(callback) {
    return fetch(this.url, {
      method: "GET",
      headers: {
        "Accept": "application/vnd.github.v3+json"
      }
    }).then(response(() => {
      return response.json();
    })).then(json(() => {
      return callback(json);
    })).catch(err(() => {
      return alert(err);
    }));
  }

};

Engine = class Engine {
  constructor() {
    this.client = new Client();
    this.client.getData(function(json) {
      this.vault = json.vault;
      this.door = json.door;
      if (this.door === "open") {
        return this.display();
      }
    });
  }

  // fetch "data/db.json"
  //   .then  (response) => response.json()
  //   .then  ( result ) =>
  //       @vault  = result.vault
  //       @door   = result.door
  //       @display() if @door is "open"
  //   .catch ( error  ) => throw error
  refresh() {
    var entry, i, len, ref;
    this.vault.credentials = [];
    ref = document.querySelectorAll(".entry");
    for (i = 0, len = ref.length; i < len; i++) {
      entry = ref[i];
      this.vault.credentials.push({
        site: entry.querySelector(".site").innerHTML,
        user: entry.querySelector(".user").innerHTML,
        pass: entry.querySelector(".pass").innerHTML
      });
    }
    return this.vault.note = document.querySelector("#note").innerHTML;
  }

  open() {
    var _vault, decoded, decrypted, error, masterkey;
    // AES decrypt
    masterkey = document.querySelector("#master").value;
    if (masterkey.length > 0 && this.door === "close") {
      try {
        decoded = atob(this.vault);
        decrypted = CryptoJS.AES.decrypt(decoded, masterkey);
        _vault = JSON.parse(decrypted.toString(CryptoJS.enc.Utf8));
      } catch (error1) {
        error = error1;
        alert("Sorry! Cant decrypt");
        return null;
      }
      this.door = "open";
      this.vault = _vault;
      localStorage.setItem("masterkey", masterkey); // Remember masterkey
    } else {
      if (this.door === "close") {
        alert("Sorry! Please enter a password");
        return null;
      }
    }
    return this.display();
  }

  save(detination) {
    var a, encoded, encrypted, file, masterkey, plaintext;
    this.refresh();
    // AES encrypt
    masterkey = document.querySelector("#master").value;
    if (masterkey.length > 0) {
      plaintext = JSON.stringify(this.vault);
      encrypted = CryptoJS.AES.encrypt(plaintext, masterkey);
      encoded = JSON.stringify({
        "door": "close",
        "vault": btoa(encrypted)
      });
    } else {
      if (!confirm("Saving in plain!")) {
        return null;
      }
      encoded = JSON.stringify({
        "door": "open",
        "vault": this.vault
      });
      encoded = encoded.replace(/},/g, "},\n");
      encoded = encoded.replace(/],/g, "],\n");
      encoded = encoded.replace(/:{/g, ":\n{");
      encoded = encoded.replace(/:\[/g, ":\n[");
    }
    // Remember masterkey
    localStorage.setItem("masterkey", masterkey);
    if (destination === "dump") {
      // Dump file
      a = document.createElement("a");
      file = new Blob([encoded], {
        type: 'application/json'
      });
      a.href = URL.createObjectURL(file);
      a.download = 'db.json';
      a.click();
    }
    if (destination === "github") {
      return console.log("Not yet available");
    }
  }

  add() {
    if (this.vault.credentials == null) {
      this.vault.credentials = [];
    }
    this.vault.credentials.push({
      "site": "http",
      "user": "user",
      "pass": "password"
    });
    return this.display();
  }

  remove(index) {
    this.vault.credentials.splice(index, 1);
    return this.display();
  }

  display() {
    var entry, i, index, len, pattern, ref, rows;
    if (this.door === "open") {
      pattern = new RegExp(document.querySelector("#filter").value);
      rows = [];
      ref = this.vault.credentials;
      for (index = i = 0, len = ref.length; i < len; index = ++i) {
        entry = ref[index];
        if (pattern.exec(Object.values(entry).join(""))) {
          rows.push("<tr class=\"entry\">" + "<td class=\"icon\"><a onclick=\"engine.remove(" + index + ")\">x</a></td>" + "<td class=\"site\" contenteditable oninput=\"engine.refresh()\">" + entry.site + "</td>" + "<td class=\"user\" contenteditable oninput=\"engine.refresh()\">" + entry.user + "</td>" + "<td class=\"pass\" contenteditable oninput=\"engine.refresh()\">" + entry.pass + "</td>" + "</tr>");
        }
      }
      document.querySelector("#credentials").innerHTML = rows.join('');
      return document.querySelector("#note").innerHTML = this.vault.note;
    }
  }

};

window.onload = function() {
  // remember the key
  if (localStorage.masterkey != null) {
    document.getElementById("master").defaultValue = localStorage.getItem("masterkey");
  }
  return window.engine = new Engine();
};
